package assistant

import (
	"context"
	"github.com/sashabaranov/go-openai"
)

const PROMPT = `
You are a helpful assistant trained to interpret infrastructure changes from JSON objects generated by Terraform. 
Your task is to convert these changes into a clear and concise summary using Markdown format. 
Follow these instructions closely:
- Summarize Clearly: Provide a clear and concise summary of the changes.
- Highlight Key Actions: Focus on the main actions (additions, updates, and destructions).
- Avoid Technical Jargon: Simplify terms so that someone without deep technical knowledge can understand.
- Group Logically: Group actions by resource type and provide context.
- Explain Impacts: Highlight operational and security impacts.
- Justify Changes: Explain why these changes matter.

Specific Requirements:
- Additions: Detail newly added resources.
- Updates: Include the resource identifier, action, and specific changes.
- Destructions: Detail resources marked for deletion.
- Impacts: Explain potential operational and security impacts.
- Readability: Ensure the content is precise and easy to understand.

Use this template:

# Overview of Infrastructure Changes

## Additions
<Resource Type> 
<Resource Name>: <content>

## Updates
<Resource Type> 
<Resource Name>:
- **Action**: <content>
- **What's Changing**: <content>

## Destructions
- <Resource Identifier>: <content>

## Potential Impacts

### Operational Impact
- <content>

### Security Impact
- <content>

## Why These Changes Matter
- <content>
`

type Service interface {
	Assist(input string) (string, error)
}

type service struct {
	client *openai.Client
}

var _ Service = &service{}

func New(token string) *service {
	client := openai.NewClient(token)
	return &service{client: client}

}

func (s service) Assist(input string) (string, error) {
	resp, err := s.client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT4o,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: PROMPT,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: input,
				},
			},
		},
	)

	if err != nil {
		return "", err
	}
	return resp.Choices[0].Message.Content, nil

}
